module part2(ClockIn, Reset, Speed, CounterValue);
	wire  enable;
	reg [27:0] RateDivider;
	wire [27:0] clockSpeed = 28'd50000000; //clock clockSpeed 50 MHz. Changed the number of bits to 28 to account for higher clock clockSpeed (26) shifted by 2
	input [1:0] Speed;
	input ClockIn, Reset;
	output reg [3:0] CounterValue;
	
	assign enable = (RateDivider == 28'd0) ? 1'b1 : 1'b0;

	always @ (posedge ClockIn)
	begin
		RateDivider <= RateDivider - 28'd1; // on the posegde of the clock subtract by 1
		if(Reset == 1'b1) 
		begin
			RateDivider <= 28'd0;
			CounterValue <= 0;
		end 
		else if (enable == 1'b1)  // enable when ratedivde is zero
		begin
			if (CounterValue == 4'b1111)
				CounterValue <= 0;
			else
				CounterValue <= CounterValue+4'b0001;

			case (Speed)
				2'b00: RateDivider <= 28'd0;
				2'b01: RateDivider <= clockSpeed-28'd1; // for every one second -> clockspeed -1 -> -1 to trigger cycle before
				2'b10: RateDivider <= (clockSpeed<<1'b1)-28'd1; // shift by a bit -> multiplying by 2 
				2'b11: RateDivider <= (clockSpeed<<2'd2)-28'd1; // shift by 2 bit -> multiplying by 4
			endcase
		end
	end
endmodule
